/**
 * 
 * `mergeAll(g1, g2, ...)` generates the items of gi,... as they are generated by the generators. It returns the array of values returned by the generators in the order they end.
 * 
 * ```typescript
 * clock           0   1   2   3   4   5   6   7   8   9
 * g              «a   b           e           h   i | y»
 * h              «        c   d       f   g | x»
 * mergeAll(g,h)  «a   b   c   d   e   f   g   h   i | [x, y]»
 * ```
 * 
 * @param gs Array of asynchronous generators
 * @returns merged generator
 */

export async function* mergeAll<T, TReturn = any, TNext = any> (...gs: AsyncGenerator<T, TReturn, TNext>[]): AsyncGenerator<T, TReturn, TNext> {
  let iterator: IteratorResult<T, TReturn>
  let next: TNext
  let returnValue: TReturn[] = []
  let iterators: IteratorResult<T, TReturn>[] = []
  const finishedObservables: Set<AsyncGenerator<T, TReturn, TNext>> = new Set([])
  function listen(): Promise<IteratorResult<T,TReturn>> {
    return new Promise(resolve => {
      let resolved: boolean = false
      if (iterators.length) {
        resolve(iterators.splice(0, 1)[0])
        return
      }
      gs.forEach(async (g, i) => {
        if (finishedObservables.has(g)) return
        iterators.push(await g.next(next))
        if(resolved) return
        resolved = true
        const iteratorResult = iterators.splice(0, 1)[0]
        if (iteratorResult.done) {
          finishedObservables.add(g)
        }
        resolve(iteratorResult as IteratorResult<T>)
      })
    })
  }
  while (returnValue.length < gs.length) {
    while (!(iterator = await listen()).done) {
      next = yield iterator.value as T
    }
    returnValue.push(iterator.value as TReturn)
  }

  return returnValue as TReturn
}
