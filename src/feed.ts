/**
 * `feed(g, f)` generates the values of `g` obtained through `g.next(e)`, where `e` is each item generated by `f`. The first time, `e` is `undefined`, so the first item of `g` obtained with feed from `f` is its second one (with `f`'s first item)
 * @param {generator} [g] the main generator
 * @param {generator} [feed] the feeding generator
 */

export function* feed<T, I> (g: Generator<T, any, I>, feed?: Generator<I>) {
  let gCursor: IteratorResult<T, any>
  let feedCursor: IteratorResult<I, any> | undefined = undefined
  do {
    gCursor = g.next(feedCursor?.value)
    if (!gCursor.done) yield gCursor.value
    if (feed && !feedCursor?.done) feedCursor = feed.next()
  } while (!gCursor.done)
}
