/**
 * 
 * `asyncTagFeed(g)` generates `[e, n]`, where `e` is an item generated by `g` and `n` is the next value passed to generate `e`.
 * 
 * `asyncTagFeed(g)` returns `[r, n]`, where `r` is the return value of `r` and `n` is the next value passed to end `g`.
 * 
 * @param g the generator whose feed is to be tagged
 * @returns 
 */

export async function* asyncTagFeed<T, TReturn = any, TNext = T>(g: AsyncGenerator<T, TReturn, TNext>): AsyncGenerator<(T | TNext)[], (TReturn | TNext)[], TNext> {
  let next: TNext
  let iterator: IteratorResult<T, TReturn>
  while (!(iterator = await g.next(next)).done) {
    next = yield [iterator.value as T, next]
  }
  return [iterator.value as TReturn, next]
}
