/**
 * `pickFeed(pick)(g)` generates the items of `g` with indexes separated the distances generated by `pick.next({{previous call to}} g.next())`
 * 
 * **Example** `pickFeed(fromArray([0, 0, 7, 0]))(range())` generates 0, 0, 7, 0
 * @param {array} [pick] the generator that provides the distances
 */

export function pickFeed<T> (pick: Generator<number, any, T>) {
  return function* (g: Generator<T>) {
    let i: number = 0
    let pickCursor = pick.next()
    let distance: number = pickCursor.value
    if (pickCursor.done) return
    for (let item of g) {
      while (!pickCursor.done && distance === 0) {
        yield item
        pickCursor = pick.next(item)
        distance = pickCursor.value
      }
      if (pickCursor.done) return
      distance--
    }
  }
}
