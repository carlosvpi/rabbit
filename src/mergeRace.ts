/**
 * 
 * `mergeRace(g1, g2, ...)` generates the items of gi,... as they are generated by the generators. It returns the first value returned by any of them.
 * 
 * ```typescript
 * clock           0   1   2   3   4   5   6   7   8   9
 * g              «a   b           e           h   i | y»
 * h              «        c   d       f   g | x»
 * mergeRace(g,h) «a   b   c   d   e   f   g | x»
 * ```
 * 
 * @param gs 
 * @returns 
 */

export async function* mergeRace<T, TReturn = any, TNext = any> (...gs: AsyncGenerator<T, TReturn, TNext>[]): AsyncGenerator<T, TReturn, TNext> {
  let iterator: IteratorResult<T, TReturn>
  let next: TNext
  let iterators: IteratorResult<T, TReturn>[] = []
  function listen(): Promise<IteratorResult<T,TReturn>> {
    return new Promise(resolve => {
      let resolved: boolean = false
      if (iterators.length) {
        resolve(iterators.pop())
        return
      }
      gs.forEach(async (g) => {
        iterators.push(await g.next(next))
        if(resolved) return
        resolved = true
        const iteratorResult = iterators.pop()
        resolve(iteratorResult as IteratorResult<T>)
      })
    })
  }
  while (!(iterator = await listen()).done) {
    next = yield iterator.value as T
  }
  return iterator.value as TReturn
}
