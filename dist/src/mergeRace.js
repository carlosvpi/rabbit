"use strict";
/**
 *
 * `mergeRace(g1, g2, ...)` generates the items of gi,... as they are generated by the generators. It returns the first value returned by any of them.
 *
 * ```typescript
 * clock           0   1   2   3   4   5   6   7   8   9
 * g              «a   b           e           h   i | y»
 * h              «        c   d       f   g | x»
 * mergeRace(g,h) «a   b   c   d   e   f   g | x»
 * ```
 *
 * @param gs
 * @returns
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeRace = mergeRace;
async function* mergeRace(...gs) {
    let iterator;
    let next;
    let iterators = [];
    let resolver;
    function listen() {
        return new Promise(resolve => {
            resolver = resolve;
            if (iterators.length) {
                resolver(iterators.splice(0, 1)[0]);
                return;
            }
            let resolved = false;
            gs.forEach(async (g) => {
                iterators.push(await g.next(next));
                if (resolved)
                    return;
                resolved = true;
                const iteratorResult = iterators.splice(0, 1)[0];
                resolver(iteratorResult);
            });
        });
    }
    while (!(iterator = await listen()).done) {
        next = yield iterator.value;
    }
    return iterator.value;
}
