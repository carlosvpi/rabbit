/**
 * The `i`-th element of `pick(indexes)(g)` is the `j`-th item of `g` (potentially `undefined`, if `g` does not have `j` items), where `j` is the `i`-th item in `indexes`
 *
 * `pick(indexes)(g)` passes down to `g` the `next` value passed to `pick` for each `i` in `indexes`, which does not correspond to the items generated by `g`.
 *
 * `pick(indexes)(g)` returns the returning value of `g` if it finished.
 *
 * `pick(indexes, returnValue)(g)` returns `returnValue` when either `indexes` or `g` end.
 *
 * **Example** `pick([1, 0, 0, 2])(range())` generates 1, 0, 0, 2
 * @param {array} [indexes] the array of indexes
 * @param {array} [returnValue] the return value
 */
export declare function pick<T, TReturn = any, TNext = any>(indexes: number[], returnValue?: TReturn): <G extends Generator<T, TReturn, TNext> | AsyncGenerator<T, TReturn, TNext>>(g: G) => G;
